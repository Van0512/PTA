#include <iostream>
using namespace std;

void inputConnection(int *setArr, int first, int second);
void checkConnection(int *setArr, int first, int second);
void checkNetwork(int *setArr, int n);
int findRoot(int *setArr, int index);

int main(void) {
	int n;
	cin >> n;
	/*
  考察简单的并查集。
	索引从 1 到 n 表示一台电脑。
	其值表示所连接的电脑（父节点），若为负数，表示这台电脑是其所在“集合”的根节点。
	数组值的绝对值表示该集合（做树理解）的深度（也可表示元素个数，比规模，算法略作变动）。
	初始化为 -1，表示每个元素单独作为一个集合，并且深度为 1 。
	*/
	int *setArr = new int[n + 1];
	for (int i = 1; i <= n; i++) 
		setArr[i] = -1;

	char order;
	int first, second;
	do {
		cin >> order;
		switch (order) {
		case 'I':
			cin >> first >> second;
			inputConnection(setArr, first, second); break;
		case  'C':
			cin >> first >> second;
			checkConnection(setArr, first, second); break;
		case 'S':
			checkNetwork(setArr, n);
		}
	} while (order != 'S');

	return 0;
}

//按秩归并。
void inputConnection(int *setArr, int first, int second) {
	int root1 = findRoot(setArr, first);
	int root2 = findRoot(setArr, second);
	if (root1 == root2) return;	//若是同一个集合，不作处理。
	if (setArr[root1] > setArr[root2]) setArr[root1] = root2;		//root1的深度比较小。
	else {
		if(setArr[root1] == setArr[root2]) setArr[root1]--;
		setArr[root2] = root1;
	}
}

int findRoot(int *setArr, int index) {
	while (setArr[index] > 0) {
		index = setArr[index];
	}
	return index;
}
// //路径压缩！
// int findRoot(int *setArr, int index) {
// 	if (setArr[index] < 0) return index;
// 	else
// 		return setArr[index] = findRoot(setArr, setArr[index]);
// }

void checkConnection(int *setArr, int first, int second) {
	int root1 = findRoot(setArr, first);
	int root2 = findRoot(setArr, second);
	if (root1 == root2 && root1 != -1) cout << "yes" << endl;
	else cout << "no" << endl;
}

void checkNetwork(int *setArr, int n) {
	int cnt = 0;
	for (int i = 1; i <= n; i++) {
		if (setArr[i] < 0) cnt++;
	}
	if (cnt == 1)
		cout << "The network is connected." << endl;
	else
		cout << "There are " << cnt << " components." << endl;
}
