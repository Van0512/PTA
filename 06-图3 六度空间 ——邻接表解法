#include <iostream>
#include <cstdio>
#include <forward_list>
#include <queue>
using namespace std;

class MyGraph {
public:
	MyGraph(int vertexCnt);
	~MyGraph();
	void addEdge(int indexA, int indexB);
	int BFS(int index);
	void SDS();

private:
	void resetVertex();

	struct Vertex {
		bool isVisited = false;
		forward_list<int> edge;		//边数值表示邻接点的索引
	};
	int vertexCnt;
	Vertex *pVertex;
};

inline
MyGraph::MyGraph(int vertexCnt) {
	this->vertexCnt = vertexCnt;
	pVertex = new Vertex[vertexCnt];
}

inline
MyGraph::~MyGraph() {
	delete[] pVertex;
}

inline
void MyGraph::addEdge(int indexA, int indexB) {
	pVertex[indexA].edge.push_front(indexB);
	pVertex[indexB].edge.push_front(indexA);
}

void MyGraph::resetVertex() {
	for (int i = 0; i < vertexCnt; ++i)
		pVertex[i].isVisited = false;
}

int MyGraph::BFS(int index) {
	int layer = 0;
	int ret = 1;

	queue<int> que;
	que.push(index);
	pVertex[index].isVisited = true;
	auto oneLayerCnt = que.size();

	while (!que.empty()) {
		int tmp = que.front();
		que.pop();
		--oneLayerCnt;

		auto last = pVertex[tmp].edge.end();
		for (auto iter = pVertex[tmp].edge.begin(); iter != last; ++iter) {
			if (!pVertex[*iter].isVisited) {
				que.push(*iter);
				pVertex[*iter].isVisited = true;
				++ret;
			}
		}

		if (oneLayerCnt == 0) {
			++layer;
			oneLayerCnt = que.size();
		}
		if (layer == 6) break;
	}

	return ret;
}

void MyGraph::SDS() {
	for (int i = 0; i < vertexCnt; ++i) {
		printf("%d: %.2f%%\n", i + 1, 100.0 * BFS(i) / vertexCnt);
		resetVertex();
	}
}


int main(void) {
	int vertexCnt, edgeCnt;
	cin >> vertexCnt >> edgeCnt;
	MyGraph graph(vertexCnt);
	for (int i = 0; i < edgeCnt; ++i) {
		int a, b;
		cin >> a >> b;
		graph.addEdge(a - 1, b - 1);
	}
	graph.SDS();

	return 0;
}
